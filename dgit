#!/usr/bin/bash

DGIT_DIR=".dgit"
DGIT_META=".dgit_meta"
DGIT_META_COMMIT="git_commit"
DGIT_META_TIMESTAMP="timestamp"
DGIT_META_LOG_NAME="log_name"
DGIT_META_BASH_NAME="bash_name"
DGIT_META_TRACE_DIR="trace_dir"
DGIT_META_DESCRIPTION="description"
DGIT_COMMAND_FILE="dgit_command.sh"
DGIT_OUTPUT_DIR="dgit_output"
DGIT_STDOUT_FILE="dgit_stdout.log"

function dgit_init() {
    if [ ! -d ".git" ]; then
        echo "Not in the root of a git repository"
        echo "Please first initialize a git repository"
        exit 1
    fi
    if [ -d "$DGIT_DIR" ]; then
        echo "dgit already initialized"
        exit 1
    fi
    mkdir $DGIT_DIR
    echo "$DGIT_DIR/" >> .gitignore
    echo "Initialize empty dgit repository in $(pwd)/$DGIT_DIR/"
}

function _dgit_check_init() {
    if [ ! -d "$DGIT_DIR" ]; then
        echo "Please first initialize dgit"
        exit 1
    fi
}

function _dgit_get_log_dir() {
    log_dir=$(ls -1 --color=never $DGIT_DIR/ | grep -E "^[0-9]+_$1$" | sort -r | head -n 1)
    echo $log_dir
}

function dgit_log() {
    # Check if dgit is initialized
    _dgit_check_init

    if [ "$#" -lt 3 ]; then
        echo "Usage: dgit log [options] <log_name> <bash_file> [<description>]"
        echo "Options:"
        echo "  -d <dir>: where to trace the outputs, default is the whole directory"
        exit 1
    fi

    # Parse the arguments
    trace_dir=.
    while [ ! -z "$2" ]; do
        case "$2" in
            -d|--logdir)
                if [[ -z "$3" ]]; then
                    echo "Please provide a directory after $2"
                    exit 1
                fi
                trace_dir=$3
                if [[ $trace_dir == /* ]]; then
                    if [[ ! $trace_dir == $(pwd)* ]]; then
                        echo "Log directory must be a subdirectory of the dgit directory"
                        exit 1
                    fi
                    $trace_dir=${trace_dir#$(pwd)/}
                fi
                shift;;
            *)
                break;;
        esac
        shift
    done
    log_name=$2
    bash_file=$3
    timestamp=$(date +%s)

    # Get the log dir name
    if [[ ! $log_name =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
        echo "Log name must be a valid bash variable name"
        exit 1
    fi
    if [ ! -z "$(_dgit_get_log_dir $log_name)" ]; then
        echo "Log name $log_name already exists"
        exit 1
    fi
    log_dir="$DGIT_DIR/${timestamp}_$log_name"

    # Check if the bash file exists
    if [[ ! $bash_file == *.sh ]]; then
        echo "You must provide a bash file ending with .sh"
        exit 1
    fi
    if [ ! -f $bash_file ]; then
        echo "File $bash_file does not exist"
        exit 1
    fi

    # Record the git head
    git_head=$(git rev-parse HEAD)
    if [[ ! $git_head =~ ^[a-z0-9]+$ ]]; then
        echo "Failed to get git head"
        echo "Have you made your first commit?"
        exit 1
    fi
    if [ $(git status --porcelain | wc -l) -ne 0 ]; then
        git add . > /dev/null
        git commit -m "dgit auto commit for logging" > /dev/null
        git_head=$(git rev-parse HEAD)
        git reset HEAD~1 > /dev/null
    fi

    # Create the log dir
    mkdir $log_dir
    if [ ! -d $log_dir ]; then
        echo "Failed to create log directory: $log_dir"
        exit 1
    fi
    cp $bash_file $log_dir/$DGIT_COMMAND_FILE
    meta_file="$log_dir/$DGIT_META"
    echo "$DGIT_META_COMMIT: $git_head" > $meta_file
    echo "$DGIT_META_TIMESTAMP: $timestamp" >> $meta_file
    echo "$DGIT_META_LOG_NAME: $log_name" >> $meta_file
    echo "$DGIT_META_BASH_NAME: $bash_file" >> $meta_file
    echo "$DGIT_META_TRACE_DIR: $trace_dir" >> $meta_file
    if [ ! -z "$4" ]; then
        echo "$DGIT_META_DESCRIPTION: $4" >> $meta_file
    fi

    # Register the interrupt handler
    ready_to_exit=0
    function interrupt_handler() {
        if [ $ready_to_exit -eq 1 ]; then
            pkill -SIGKILL -P $main_pid
        fi
    }
    trap interrupt_handler SIGINT

    # Start the monitor
    mkdir -p $trace_dir
    coproc monitor { inotifywait -m -r -e modify -e moved_to -q $trace_dir; }
    monitor_pid=${monitor_PID}

    # Start the bash
    unbuffer bash $bash_file &> >(tee $log_dir/$DGIT_STDOUT_FILE || true && pkill -SIGTERM -P $monitor_pid) &
    main_pid=$!
    ready_to_exit=1

    # Record the output files
    echo "output_files:" >> $meta_file
    while read -r line; do
        dir=$(echo $line | awk '{print $1}')
        if [[ $dir =~ $DGIT_DIR ]]; then
            continue
        fi
        op=$(echo $line | awk '{print $2}')
        file=$(echo $line | awk '{print $3}')
        file=$dir/$file
        if [ -z "$(echo "$output_files" | grep "^$file$")" ]; then
            output_files="$output_files"$'\n'"$file"
            echo $file >> $meta_file
        fi
    done <&${monitor[0]}
    trap - SIGINT

    # Parse the strace log
    echo -e "\n\033[0;32mparsing strace log ...\033[0m"
    for file in $(cat "$log_dir/$DGIT_META" | grep -v ":"); do
        new_file="$log_dir/$DGIT_OUTPUT_DIR/$file"
        mkdir -p $(dirname $new_file)
        cp --reflink=auto $file $new_file
        chmod 444 $new_file
    done
    echo -e "\033[0;32mparsing strace log done\033[0m"
}

function _dgit_get_meta() {
    meta_file="$DGIT_DIR/$1/$DGIT_META"
    meta_item=DGIT_META_$2
    echo "$(cat $meta_file | grep "${!meta_item}" | sed "s/${!meta_item}: //")"
}

function dgit_ls() {
    _dgit_check_init
    echo "-------------------------------------------------------------------------------------"
    echo -e "Timestamp\t\t| Log Name\t| Commit\t| Bash File\t| Description"
    echo "-------------------------------------------------------------------------------------"
    for log_dir in $(ls -1 $DGIT_DIR/); do
        timestamp=$(_dgit_get_meta $log_dir TIMESTAMP)
        timestamp=$(date -d @$timestamp +"%Y-%m-%d %H:%M:%S")
        log_name=$(_dgit_get_meta $log_dir LOG_NAME)
        commit_hash=$(_dgit_get_meta $log_dir COMMIT | head -c 8)
        bash_file=$(_dgit_get_meta $log_dir BASH_NAME)
        description=$(_dgit_get_meta $log_dir DESCRIPTION)
        echo -e "$timestamp\t| $log_name\t| $commit_hash\t| $bash_file\t| $description"
    done
    echo "-------------------------------------------------------------------------------------"
}

function _dgit_get_log_dir_or_exit() {
    log_dir=$(_dgit_get_log_dir $1)
    if [ -z "$log_dir" ]; then
        echo "Log name $1 not found"
        exit 1
    fi
    echo $log_dir
}

function dgit_stdout() {
    _dgit_check_init
    if [ -z "$2" ]; then
        echo "Usage: dgit stdout <log_name>"
        exit 1
    fi
    log_dir=$(_dgit_get_log_dir_or_exit $2)
    cat "$DGIT_DIR/$log_dir/$DGIT_OUTPUT_DIR/$DGIT_STDOUT_FILE"
}

function dgit_fout() {
    _dgit_check_init
    prompt=-i
    if [ "$2" == "-f" ]; then
        prompt=
        shift
    fi
    if [ -z "$2" ]; then
        echo "Usage: dgit fout [-f] <log_name>"
        echo "  -f: force overwrite"
        exit 1
    fi
    log_dir=$(_dgit_get_log_dir_or_exit $2)
    for file in $(cat "$DGIT_DIR/$log_dir/$DGIT_META" | grep -v ":"); do
        stored_file="$DGIT_DIR/$log_dir/$DGIT_OUTPUT_DIR/$file"
        mkdir -p $(dirname $file)
        cp $prompt --reflink=auto $stored_file $file
    done
}

function dgit_command() {
    _dgit_check_init
    if [ -z "$2" ]; then
        echo "Usage: dgit command <log_name>"
        exit 1
    fi
    log_dir=$(_dgit_get_log_dir_or_exit $2)
    bash_file=$(_dgit_get_meta $log_dir BASH_NAME)
    echo "-------------------------------------------------------------------------------------"
    echo "Bash file: $bash_file"
    echo "-------------------------------------------------------------------------------------"
    cat "$DGIT_DIR/$log_dir/$DGIT_COMMAND_FILE"
}

function dgit_checkout() {
    _dgit_check_init
    prompt=-i
    if [ "$2" == "-f" ]; then
        prompt=
        shift
    fi
    if [ -z "$2" ]; then
        echo "Usage: dgit checkout [-f] <log_name>"
        echo "  -f: force overwrite"
        exit 1
    fi
    log_dir=$(_dgit_get_log_dir_or_exit $2)
    commit_hash=$(_dgit_get_meta $log_dir COMMIT)
    if [ -z "$commit_hash" ]; then
        echo "Failed to find commit hash"
        exit 1
    fi
    git checkout $commit_hash
    if [ $? -ne 0 ]; then
        echo "Failed to checkout commit $commit_hash"
        exit 1
    fi
    timestamp=$(_dgit_get_meta $log_dir TIMESTAMP)
    timestamp=$(date -d @$timestamp +"%Y-%m-%d %H:%M:%S")
    echo "Checkout log $2 at $timestamp"
    bash_file=$(_dgit_get_meta $log_dir BASH_NAME)
    echo "Copying bash file: $bash_file"
    mkdir -p $(dirname $bash_file)
    cp $prompt "$DGIT_DIR/$log_dir/$DGIT_COMMAND_FILE" $bash_file
}

function dgit_print_help_and_exit() {
    echo "Usage: dgit init|log|ls|stdout|fout|command|checkout"
    echo "  init: initialize dgit, run git init first"
    echo "  log: run a bash script, monitor and save the output"
    echo "  ls: list all logs"
    echo "  stdout: print the stdout of a log"
    echo "  fout: copy the output files of a log back to the original location"
    echo "  command: print the bash command of a log"
    echo "  checkout: reset to the state when the log was created"
    exit 1
}

if [ "$#" -eq 0 ]; then
    dgit_print_help_and_exit
fi

if [ "$1" == "init" ]; then
    dgit_init
elif [ "$1" == "log" ]; then
    dgit_log "$@"
elif [ "$1" == "ls" ]; then
    dgit_ls
elif [ "$1" == "stdout" ]; then
    dgit_stdout "$@"
elif [ "$1" == "fout" ]; then
    dgit_fout "$@"
elif [ "$1" == "command" ]; then
    dgit_command "$@"
elif [ "$1" == "checkout" ]; then
    dgit_checkout "$@"
else
    dgit_print_help_and_exit
fi
